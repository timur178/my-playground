name: bootstrap-argocd

on:
  workflow_dispatch: {}
  push:
    branches: [ feature/kafka-dev ]
    paths:
      - ".github/workflows/bootstrap-argocd.yaml"
      - "kafka-gitops/01-operators/argocd-accounts-and-rbac.yaml"

permissions:
  contents: read
  id-token: write

defaults:
  run:
    shell: bash

concurrency:
  group: bootstrap-argocd-${{ github.ref }}
  cancel-in-progress: true

env:
  AWS_REGION:        ${{ vars.AWS_REGION }}
  AWS_OIDC_ROLE_ARN: ${{ vars.AWS_OIDC_ROLE_ARN }}
  EKS_CLUSTER_NAME:  ${{ vars.EKS_CLUSTER_NAME }}

jobs:
  bootstrap:
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set kubeconfig to EKS
        run: aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION"

      - name: Ensure argocd namespace
        run: kubectl get ns argocd >/dev/null 2>&1 || kubectl create ns argocd

      - name: Install / upgrade Argo CD
        run: kubectl -n argocd apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      # Seed minimal config so argocd-server can boot (contains argocd-cm / argocd-rbac-cm)
      - name: Seed Argo CD base config
        run: |
          set -euo pipefail
          kubectl -n argocd apply -f kafka-gitops/01-operators/argocd-accounts-and-rbac.yaml
          kubectl -n argocd get cm argocd-cm

      - name: Wait for Argo CD to be ready
        run: |
          set -euo pipefail
          kubectl -n argocd rollout status deploy/argocd-server --timeout=10m
          kubectl -n argocd rollout status deploy/argocd-repo-server --timeout=10m
          if kubectl -n argocd get statefulset argocd-application-controller >/dev/null 2>&1; then
            kubectl -n argocd rollout status statefulset/argocd-application-controller --timeout=10m
          else
            kubectl -n argocd rollout status deploy/argocd-application-controller --timeout=10m
          fi
          kubectl -n argocd wait pod -l app.kubernetes.io/name=argocd-server \
            --for=condition=Ready --timeout=10m

      - name: Debug Argo CD (only if failed)
        if: failure()
        run: |
          set -x
          kubectl -n argocd get all
          kubectl -n argocd get pods -o wide
          kubectl -n argocd describe deploy/argocd-server || true
          POD=$(kubectl -n argocd get pod -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].metadata.name}' || true)
          kubectl -n argocd logs "$POD" --tail=200 || true

      # --- Show creation times for traceability ---
      - name: Show Argo CD creation timestamps
        run: |
          echo "===== Namespace ====="
          kubectl get ns argocd -o jsonpath='{.metadata.creationTimestamp}'; echo
          echo "===== Deployments ====="
          kubectl -n argocd get deploy -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp
          echo "===== Pods ====="
          kubectl -n argocd get pods -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp
          echo "===== Services ====="
          kubectl -n argocd get svc -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp
          echo "===== ConfigMaps ====="
          kubectl -n argocd get cm -o custom-columns=NAME:.metadata.name,CREATED:.metadata.creationTimestamp
      
      
