# kafka-gitops/04-apps/argocd-app-producer.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafka-producer
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "40"
    # Image Updater: watch this image (alias = "app")
    argocd-image-updater.argoproj.io/image-list: app=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_PREFIX}/kafka-producer
    # Map helm params to update
    argocd-image-updater.argoproj.io/app.helm.image-name: image.repository
    argocd-image-updater.argoproj.io/app.helm.image-tag: image.tag
    # Write back to Argo CD (not Git)
    argocd-image-updater.argoproj.io/write-back-method: argocd
    # Pick newest pushed tag matching your CI short SHAs
    argocd-image-updater.argoproj.io/allow-tags: regexp:^[0-9a-f]{7}$
    argocd-image-updater.argoproj.io/update-strategy: latest
spec:
  project: kafka
  destination: { namespace: kafka, server: https://kubernetes.default.svc }
  source:
    repoURL: ${GITOPS_REPO_URL}
    targetRevision: ${GITOPS_TARGET_REVISION}
    path: kafka-helm/charts/pyservice
    helm:
      valueFiles:
        - ../../values/producer-dev.yaml
  syncPolicy: { automated: { prune: true, selfHeal: true } }
---
# kafka-gitops/04-apps/argocd-app-consumer.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafka-consumer
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "40"
    argocd-image-updater.argoproj.io/image-list: app=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_PREFIX}/kafka-consumer
    argocd-image-updater.argoproj.io/app.helm.image-name: image.repository
    argocd-image-updater.argoproj.io/app.helm.image-tag: image.tag
    argocd-image-updater.argoproj.io/write-back-method: argocd
    argocd-image-updater.argoproj.io/allow-tags: regexp:^[0-9a-f]{7}$
    argocd-image-updater.argoproj.io/update-strategy: latest
spec:
  project: kafka
  destination: { namespace: kafka, server: https://kubernetes.default.svc }
  source:
    repoURL: ${GITOPS_REPO_URL}
    targetRevision: ${GITOPS_TARGET_REVISION}
    path: kafka-helm/charts/pyservice
    helm:
      valueFiles:
        - ../../values/consumer-dev.yaml
  syncPolicy: { automated: { prune: true, selfHeal: true } }
---
# kafka-gitops/04-apps/argocd-app-dashboard.yaml
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafka-dashboard
  namespace: argocd
  annotations:
    argocd.argoproj.io/sync-wave: "42"
    argocd-image-updater.argoproj.io/image-list: app=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_PREFIX}/kafka-dashboard
    argocd-image-updater.argoproj.io/app.helm.image-name: image.repository
    argocd-image-updater.argoproj.io/app.helm.image-tag: image.tag
    argocd-image-updater.argoproj.io/write-back-method: argocd
    argocd-image-updater.argoproj.io/allow-tags: regexp:^[0-9a-f]{7}$
    argocd-image-updater.argoproj.io/update-strategy: latest
spec:
  project: kafka
  destination: { namespace: kafka, server: https://kubernetes.default.svc }
  source:
    repoURL: ${GITOPS_REPO_URL}
    targetRevision: ${GITOPS_TARGET_REVISION}
    path: kafka-helm/charts/pyservice
    helm:
      valueFiles:
        - ../../values/dashboard-dev.yaml
  syncPolicy: { automated: { prune: true, selfHeal: true } }
